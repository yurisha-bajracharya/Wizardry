#include "C:\raylib\raylib\src\raylib.h"
#include "menu.h"
#include "button.hpp"
#include "ctime"
#include "iostream"
#include "string.h"

#define MAX_LINES 6 // Maximum number of lines in the area
#define MAX_CHARACTERS_PER_LINE 35  // Maximum characters per line before wrapping

Texture2D backgroundm;
Texture2D broom;
Texture2D stand;
Button startButton;
Button aboutButton;
Button exitButton;
Music musicm;

bool exit1 = false;
int frameCount = 6;
Rectangle frameRec = {0.0f, 0.0f, (float)broom.width, (float)broom.height};
Rectangle frameRec2 = {0.0f, 0.0f, (float)stand.width, (float)stand.height};
int currentframe = 0;
int frameCounter = 0;
int frameSpeed = 5;
float delayTime = 1.5f;
float timeElapsed = 0.0f;

Vector2 initialPosition = {0, 700 - frameRec.height - 10};  // Adjusted for new height
Vector2 targetPosition = {1260 / 2.0f - frameRec.width / 4.0f, initialPosition.y};  // Adjusted for new width
Vector2 standPosition = {1260 / 2.0f - frameRec2.width / 4.0f, 700 - frameRec2.height};  // Adjusted for new height

bool isBroom = true;
bool isReachedTarget = false;
bool timeForText = false;

//*******************************FOR TEXT******************************
const char* messages[] = {
    "Hello There!!! Ready to conquer?",
    "I hope you are ready. But hey don't hit (START) just yet! ",
    "Master the game by first mastering the rules.",
    "Take a moment to check about page - it could save you from a few extra lives",
    "Good luck with the Game.",
    " "
};

// Font and text size
Font font = GetFontDefault();
int messageIndex = 0;  // Current message being displayed
int charIndex = 0;     // Number of characters displayed
float typingSpeed = 0.05f;  // Typing speed (lower = faster)
float timePassed = 0.0f;  // Time elapsed for typing
int totalMessages = sizeof(messages) / sizeof(messages[0]);

Rectangle textArea = {850, 670, 0, 100};  // Area to display text (x, y, width, height)
int lineHeight = 40;  // Line height for spacing between lines

void InitMenu()
{
    backgroundm = LoadTexture("./images/ok.png");
    broom = LoadTexture("./images/cute.png");
    stand = LoadTexture("./images/stand.png");
    musicm = LoadMusicStream("./Audio/main.mp3");
    startButton = Button("images/start.png", {1260 * 0.825, 700 * 0.4}, 0.8);  // Adjusted button position
    aboutButton = Button("images/about.png", {1260 * 0.825, 700 * 0.54}, 0.8);  // Adjusted button position
    exitButton = Button("images/exit.png", {1260 * 0.825, 700 * 0.68}, 0.8);  // Adjusted button position
}

void UpdateMenu() {
    UpdateMusicStream(musicm);

    // For updating the broom frame until final position has reached
    if (isBroom && initialPosition.x < targetPosition.x) {
        frameCounter++;

        if (frameCounter >= (60 / frameSpeed)) {
            frameCounter = 0;
            currentframe++;

            if (currentframe >= frameCount) currentframe = 0;
            frameRec.x = (float)currentframe * frameRec.width;  // Update the frame rectangle
        }
        // Move the character
        initialPosition.x += 1.0f; // Adjust the movement from here
    }

    if (!isReachedTarget && initialPosition.x >= targetPosition.x) {
        isReachedTarget = true;
    }

    if (isReachedTarget && isBroom) {
        timeElapsed += GetFrameTime();
        if (timeElapsed >= delayTime) {
            isBroom = false;
        }
    }

    if (!isBroom) {
        timeForText = true;
    }

    // Text logic
    if (timeForText) {
        if (IsKeyPressed(KEY_SPACE) && messageIndex < totalMessages - 1) {
            messageIndex++;  // Move to the next message
            charIndex = 0;   // Reset character index for new message
            timePassed = 0.0f;  // Reset timer
        }

        // Update the time and characters for typing effect
        timePassed += GetFrameTime();
        if (timePassed >= typingSpeed && charIndex < strlen(messages[messageIndex])) {
            charIndex++;
            timePassed = 0.0f;  // Reset timer for next character
        }
    }

    // Mouse position and button click check
    Vector2 mousePosition = GetMousePosition();
    bool mousePressed = IsMouseButtonPressed(MOUSE_BUTTON_LEFT);

    if (startButton.isPressed(mousePosition, mousePressed)) {
        std::cout << "Start button is pressed" << std::endl;
    }

    if (aboutButton.isPressed(mousePosition, mousePressed)) {
        std::cout << "About button is pressed" << std::endl;
    }

    if (exitButton.isPressed(mousePosition, mousePressed)) {
       exit1=true;
    }
}

    void DrawMenu() {
  
    ClearBackground(BLACK);
    DrawTexture(backgroundm, 0, 0, WHITE);
    startButton.Draw();
    aboutButton.Draw();
    exitButton.Draw();

    
}
